import json
from dataclasses import dataclass, field
from typing import Optional
from pathlib import Path
import numpy as np
from datasets import load_dataset

from time import perf_counter_ns
import numpy as np
from contextlib import contextmanager
import torch

SPLIT_PATHS = {
    ('imdb', 'train'): 'aclImdb/train',
    ('imdb', 'test'): 'aclImdb/test',
    ('sst2', 'train'): 'sst/train.tsv',
    ('sst2', 'test'): 'sst/dev.tsv'
}

SEC_TO_NS_SCALE = 1000000000

@dataclass
class Benchmark:
    summary_msg: str = field(default_factory=str)

    @property
    def num_runs(self) -> int:
        return len(self.latencies)

    @contextmanager
    def track(self, step):
        start = perf_counter_ns()
        yield
        ns = perf_counter_ns() - start
        msg = f"\n{'*' * 70}\n'{step}' took {ns / SEC_TO_NS_SCALE:.2f}s ({ns:,}ns)\n{'*' * 70}\n"
        print(msg)
        self.summary_msg += msg + '\n'

    def summary(self):
        print(f"\n{'#' * 30}\nBenchmark Summary:\n{'#' * 30}\n\n{self.summary_msg}")

@dataclass
class Arguments:
    """
    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.
    """
    lm_method: str = field(
        default=None,
        metadata={
            "help": "Few-shot LM Loss method ('pet' / 'adapet')."
        },
    )
    model_name_or_path: str = field(
        default="roberta-base",
        metadata={"help": "Path to pretrained model or model identifier from huggingface.co/models"}
    )

    tokenizer_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained tokenizer name or path if not the same as model_name"}
    )
    smoke_test: Optional[bool] = field(
        default=False,
        metadata={"help": "Whether to execute in sanity check mode."}
    )
    super_smoke: Optional[bool] = field(
        default=False,
        metadata={"help": "Always run only 1 train step with max_samples={'train': 20, 'test': 25, 'dev': 15} ."}
    )
    max_train_samples: Optional[int] = field(
        default=None,
        metadata={
            "help": "For debugging purposes or quicker training, truncate the number of training examples to this "
            "value if set."
        },
    )
    max_test_samples: Optional[int] = field(
        default=None,
        metadata={
            "help": "For debugging purposes or quicker training, truncate the number of testing examples to this "
            "value if set."
        },
    )
    max_dev_samples: Optional[int] = field(
        default=None,
        metadata={
            "help": "For debugging purposes or quicker training, truncate the number of dev examples to this "
            "value if set."
            },
    )
    dataset: Optional[str] = field(
        default='imdb',
        metadata={
            "help": "Select dataset ('imdb' / 'sst-2'). Default is 'imdb'"
        },
    )
    max_seq_len: int = field(
        default=512,
        metadata={
            "help": "The maximum total input sequence length after tokenization. Sequences longer "
            "than this will be truncated, sequences shorter will be padded."
        },
    )
    ipex: bool = field(
        default=False,
        metadata={
            "help": "Use IntelÂ® Extension for PyTorch for fine-Tuning."
        },
    )
    preprocessing_num_workers: Optional[int] = field(
        default=None,
        metadata={"help": "The number of processes to use for the preprocessing."},
    )
    overwrite_cache: bool = field(
        default=True, metadata={"help": "Overwrite the cached training and evaluation sets."}
    )
    real_time: bool = field(
        default=False, metadata={"help": "Whether to pre-process the inputs in real-time."}
    )
    few_shot: bool = field(
        default=False,
        metadata={
            "help": "Employ few-shot pattern-based MLM training on a small subset of the data."
        },
    )
    pattern_id: int = field(
        default=0, metadata={"help": "Few-shot: pattern id of the pattern to use for few-shot training."}
    )
    label_all_tokens: bool = field(
        default=False,
        metadata={
            "help": "Whether to put the label for one word on all tokens of generated by that word or just on the "
            "one (in which case the other tokens will have a padding index)."
        },
    )
    npe_only: bool = field(
        default=False,
        metadata={
            "help": "Run step 1 only (for debug puropes)."
        },
    )
    save_model: bool = field(
        default=True,
        metadata={
            "help": "Whether to save the fine-tuned model to file."
        },
    )
    np_extractors: str = field(
        default="pos",
        metadata={
            "help": "Which Noun Phrase extraction methods to use. Specify 1 or 2 from "
            "['pos', 'regex' and 'chunker'] seperated by '+', E.g. 'pos+regex'."
        },
    )
    results_dir: Optional[str] = field(
        default=None,
        metadata={
            "help": "Directory to save all results for current test mode (model/baseline)."
        },
    )
    pos_ex_only: bool = field(
        default=False,
        metadata={
            "help": "Use only positive examples for training."
        },
    )
    unlabeled: bool = field(
        default=False,
        metadata={
            "help": "Use only unlabeked data for MLM training."
        },
    )
    max_train_steps: int = field(
        default=None,
        metadata={
            "help": "Total number of training steps to perform. If provided, overrides num_train_epochs."
        },
    )
    alpha: float = field(
        default=0.4,
        metadata={
            "help": "Alpha value for linear loss calculation."
        },
    )
    per_device_unlabeled_batch_size: int = field(
        default=4,
        metadata={
            "help": "Size of unlabeled batch for training."
        },
    )
    mlm_prob: float = field(
        default=0.15,
        metadata={
            "help": "MLM probability."
        },
    )
    tr_phases: dict = field(
        default = None,
        metadata={
            "help": "Dict describing few_shot model training phases configuration."
        },
    )

    ace_using_model: bool = field(default=None)
    ace_model: str = field(default=None)
    ace_steps: int = field(default=None)
    ace_lr: float = field(default=None)
    ace_bs: int = field(default=None)

    tr_phase_1_label_loss: bool = field(default=None)
    tr_phase_1_lm: bool = field(default=None)
    tr_phase_1_steps: int = field(default=None)
    tr_phase_1_lr: float = field(default=None)

    tr_phase_2: bool = field(default=None)
    tr_phase_2_label_loss: bool = field(default=None)
    tr_phase_2_lm: bool = field(default=None)
    tr_phase_2_steps: int = field(default=None)
    tr_phase_2_lr: float = field(default=None)
    
def verify_and_load_json_dataset(path: str):
    # Verify json schema
    with open(path) as jsonl_f:
        for line in jsonl_f:
            print(data)
            assert all(k in data.keys() for k in ("tokens", "tags", "text"))
            assert isinstance(data["tokens"], list)
            assert isinstance(data["tags"], list)
            assert isinstance(data["text"], str)
            assert len(data["tags"]) == len(data["tokens"])

            for tok, tag in zip(data["tokens"], data["tags"]):
                assert isinstance(tok, str)
                assert isinstance(tag, str)

    print("json schema successfully verified.")
    dataset = load_dataset("json", data_files=path)
    return dataset

def to_inputs(batch: dict, device) -> dict:
    return {k: (v if torch.is_tensor(v) else torch.tensor(v)).to(device)\
        for k, v in batch.items()}

class PredsLabels:
    def __init__(self, preds, labels):
        self.predictions=preds
        self.label_ids=labels

def compute_metrics(p):
    preds = np.argmax(p.predictions, axis=1)
    return {"acc": (preds == p.label_ids).mean()}

def read_dataset(name: str, split: str="test", generator: bool=False,
        return_labels: bool=True, batch_size: int=1, max_samples: int=None):
    split_path = SPLIT_PATHS[(name, split)]
    args = split_path, return_labels, batch_size, max_samples
    gen = imdb_gen(*args) if name == 'imdb' else sst_gen(*args)
    
    if generator:
        return gen
    
    texts, labels = [], []
    for text_batch, label_batch in gen:
        texts.extend(text_batch)
        if return_labels:
            labels.extend(label_batch)
    return (texts, labels) if return_labels else texts

def imdb_gen(split_path, return_label, batch_size, max_samples):
    text_batch, label_batch = [], []
    for label_dir in "pos", "neg":
        for i, text_file in enumerate((Path(split_path) / label_dir).iterdir()):
            text_batch.append(text_file.read_text())
            if return_label:
                label_batch.append(0 if label_dir == 'neg' else 1)
            if len(text_batch) == batch_size:
                yield (text_batch, label_batch) if return_label else text_batch
                text_batch, label_batch = [], []
            if max_samples is not None and i == max_samples / 2:
                break
    if text_batch:
        yield (text_batch, label_batch) if return_label else text_batch
        text_batch, label_batch = [], []

def sst_gen(split_path, return_label, batch_size, max_samples):
    text_batch, label_batch = [], []
    i = 0
    with open(split_path) as f:
        for line in f.readlines()[1:]:
            if line:
                i += 1
                text, label = line.strip().split(" \t")
                text_batch.append(text)
                if return_label:
                    label_batch.append(int(label))
            if len(text_batch) == batch_size:
                yield (text_batch, label_batch) if return_label else text_batch
                text_batch, label_batch = [], []
            if max_samples is not None and i == max_samples:
                break
    if text_batch:
        yield (text_batch, label_batch) if return_label else text_batch
        text_batch, label_batch = [], []

def to_tensor_dataset(framework, encodings, labels=None):
    if framework == 'tf':
        from tensorflow.data import Dataset

        data = (dict(encodings), labels) if labels else dict(encodings)
        dataset = Dataset.from_tensor_slices(data)
        
    if framework == 'pt':
        from torch import tensor
        from torch.utils.data import Dataset

        class IMDbDataset(Dataset):
            def __init__(self, encodings, labels):
                self.encodings = encodings
                self.labels = labels

            def __getitem__(self, idx):
                item = {key: tensor(val[idx]) for key, val in self.encodings.items()}
                item['labels'] = tensor(self.labels[idx])
                return item

            def __len__(self):
                return len(self.labels)
        dataset = IMDbDataset(encodings, labels)

    return dataset
    
def save_train_metrics(train_result, trainer, max_train):
    # pytorch only
    if train_result:
        metrics = train_result.metrics
        metrics["train_samples"] = max_train
        trainer.save_metrics("train", metrics)
        trainer.save_state()

def save_test_metrics(metrics, max_test, output_dir):
    metrics['test_samples'] = max_test
    with open(Path(output_dir) /'test_results.json', 'w') as f:
        json.dump(metrics, f, indent=2)
    return '\n'.join(f'{k}: {v}' for k, v in metrics.items())
